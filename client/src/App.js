import React, { useEffect, lazy, Suspense } from 'react'
import { Switch, Route, Redirect } from 'react-router-dom'
import { connect } from 'react-redux'
import { createStructuredSelector } from 'reselect'
import { selectCurrentUser } from './redux/user/user.selector'
import { checkUserSession } from './redux/user/user.actions'
import { GlobalStyle } from './global.styles'
import Header from './components/header/header.component'
import Spinner from './components/spinner/spinner.component'
import ErrorBoundary from './components/error-boundary/error-boundary.component'

// The HomePage is lazy loaded (we removed the general import)
// It will not render the component's files unless the user routes to it.
// However, it is async, so if the server is slow, it might not load
// or trigger and error. So we have to leverage on Suspense.
const HomePage = lazy( () => import('./pages/homepage/homepage.component') )
const ShopPage = lazy( () => import('./pages/shop/shop.component') )
const CheckoutPage = lazy( () => import('./pages/checkout/checkout.component') )
const SigninAndSignup = lazy( () => import('./pages/signin-and-signup/signin-and-signup.component') )


const App = ({ checkUserSession, currentUser }) => {

  useEffect( () => {

    checkUserSession()

  }, [checkUserSession])

  return (
    <div>
      <GlobalStyle />
      <Header />
      <Switch>

    {/* Suspense is used with any lazy components, and will show a 
        fallback value in its place if the async component didnt 
        render yet. ErrorBoundary wraps all children and catches any
        error that may happen, like connection lost. */}
        <ErrorBoundary>
          <Suspense fallback={ <Spinner /> }>
            <Route exact path='/' component={ HomePage } />
            <Route path='/shop' component={ ShopPage } />
            <Route exact path='/checkout' component={ CheckoutPage } />
            <Route 
              exact path='/signin' 
              render={ () => currentUser ? (
                <Redirect to='/' />
                ) : (
                <SigninAndSignup />
              )}
            />
          </Suspense>
        </ErrorBoundary>
      </Switch>
    </div>
  )
}

const mapStateToProps = createStructuredSelector({
  currentUser: selectCurrentUser,
})

const mapDispatchToProps = dispatch => ({
  checkUserSession: () => dispatch(checkUserSession())
})

export default connect(mapStateToProps, mapDispatchToProps)(App)




// // BEFORE REDUX SAGAS
// 
// componentDidMount() {
//   // setCurrentUser and collectionsArray come from reducer 
//   // as props to this component (mapStateToProps)
//   const { setCurrentUser /*, collectionsArray*/ } = this.props

//   this.unsubscribeFromAuth = auth.onAuthStateChanged( async userAuthObj => {

//     // if signing out, it will be null. If it is signing in, it will be an obj
//     if (userAuthObj) {

//       // we get a user reference from onAuthStateChanged
//       const userRef = await createUserProfileDocument(userAuthObj)

//       // createUserProfileDocument() returns a user obj stapshot at the time of calling
//       // a new user obj if registering, a user obj on login
//       // onSnapshot() also subscribes to changes on the user
//       // object, so any changes on it will modify the state
//       userRef.onSnapshot(snapshot => {

//         // set currentUser as its snapshot.id and snapshot.data()
//         // which holds name and email. Props are gotten from reducer
//         setCurrentUser(
//           {
//             currentUser: {
//               id: snapshot.id,
//               ...snapshot.data()
//             }
//           }
//           // ,
//           // setstate is async, to check it after a change,
//           // remember to pass a callback to it!
//           // () => console.log(this.state)
//         )
//       })
    
//     } else {

//       // nothing came up from onAuthStateChange (null user),
//       // so state should be null
//       setCurrentUser(userAuthObj)
//     }

//     // call for addCollectionAndDocuments, pass the key that will
//     // serve as Firestore entry point (id) for the reference, and
//     // the collectionArray, which is the result of the reducer
//     // selector for collectionsForPreview.
//     // We only need the title and the items, since everything else
//     // will be generated by Firebase. Destructure the object in a
//     // map() and return a new array for each object with those two.
//     /* addCollectionAndDocuments(
//       'collections', 
//       collectionsArray.map( ({ title, items }) => ({ title, items }) )
//     ) */
  
//   // firebase error observable callback 
//   // }, error => console.log(error))
//   })
// }